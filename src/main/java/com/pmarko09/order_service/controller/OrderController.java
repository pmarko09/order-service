package com.pmarko09.order_service.controller;

import com.pmarko09.order_service.model.dto.InvoiceDto;
import com.pmarko09.order_service.model.dto.OrderDto;
import com.pmarko09.order_service.model.dto.OrderRequestDto;
import com.pmarko09.order_service.service.OrderService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controller class for order operations.
 * Provides endpoints for processing orders, retrieving orders by client ID, generating invoices, and fetching invoices by order ID.
 *
 * @author [Your Name] (generated by Bard)
 */
@Slf4j
@RestController
@RequestMapping("/order")
@RequiredArgsConstructor
@Tag(name = "Order Management", description = "Endpoints for managing orders and invoices")
public class OrderController {

    private final OrderService orderService;

    /**
     * Processes a new order.
     *
     * @param orderRequest The order details to be processed.
     * @return A OrderDto object representing the created order.
     */
    @PostMapping
    @Operation(summary = "Process a new order", description = "Processing new order with details")
    public OrderDto processOrder(@RequestBody OrderRequestDto orderRequest) {
        log.info("Endpoint POST called: /order");
        log.info("Processing order with details: {}", orderRequest);
        return orderService.processOrder(orderRequest);
    }

    /**
     * Retrieves a list of orders for a specific client.
     *
     * @param clientId The ID of the client.
     * @return A list of OrderDto objects representing the retrieved orders.
     */
    @GetMapping
    @Operation(summary = "Retrieve orders by client ID")
    public List<OrderDto> getOrdersByClientId(@RequestParam Long clientId) {
        log.info("Endpoint GET called: /order?clientId={}", clientId);
        log.info("Fetching orders for client with ID: {}", clientId);
        return orderService.getOrdersByClient(clientId);
    }

    /**
     * Generates an invoice for a processed order.
     *
     * @param orderId The ID of the order.
     * @return A InvoiceDto object representing the generated invoice.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @PostMapping("/invoice/{orderId}")
    @Operation(summary = "Generating invoice")
    public InvoiceDto generateInvoice(@PathVariable Long orderId) {
        log.info("Endpoint POST called: /order/invoice/{}", orderId);
        log.info("Generating invoice for order with ID: {}", orderId);
        return orderService.generateInvoice(orderId);
    }

    /**
     * Retrieves an invoice for a processed order.
     *
     * @param orderId The ID of the order.
     * @return A InvoiceDto object representing the retrieved invoice.
     */
    @GetMapping("/invoice/{orderId}")
    @Operation(summary = "Retrieving invoice by order ID")
    public InvoiceDto getInvoiceByOrderId(@PathVariable Long orderId) {
        log.info("Endpoint GET called: /order/invoice/{}", orderId);
        log.info("Fetching invoice for order with ID: {}", orderId);
        return orderService.getInvoiceByOrderId(orderId);
    }
}